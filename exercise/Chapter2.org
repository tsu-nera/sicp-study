#+title: 第 2 章 データによる抽象の構築

- [[http://community.schemewiki.org/?sicp-solutions][sicp-solutions]]
- https://github.com/bixuanzju/sicp-exercises-elisp

* 2.1

#+begin_src emacs-lisp
(defun make-rat (n d)
  (if (< d 0)
      (if (< n 0)
          (cons n (* -1 d))
          (cons (* -1 n) (* -1 d)))
      (cons n d)))

(defun numer (x)
  (car x))
(defun denum (x)
  (cdr x))

(make-rat 1 2)
(make-rat -1 2)
(make-rat -2 -2)
(make-rat 1 -2)

(defun print-rat (x)
  (newline)
  (princ (numer x))
  (princ "/")
  (princ (denum x)))
#+end_src

* 2.2
#+begin_src emacs-lisp
(defun make-point (x y)
  (cons x y))
(defun x-point (x)
  (car x))
(defun y-point (x)
  (cdr x))

(defun make-segment (x1 x2)
  (cons x1 x2))
(defun start-segment (x)
  (car x))
(defun end-segment (x)
  (cdr x))

(defun midpoint-segment (x y)
  (make-segment
   ((/ 2 (x-point (start-segment x)) (x-point (start-segment y))))
   ((/ 2 (y-point (start-segment x)) (y-point (start-segment y))))))
#+end_src

* 2.3
  
#+begin_src emacs-lisp
(defun double (x) (* x x))

(defun get-length (rect)
  "ここでアルキメデスの定理で長さをもとめるのだけど、省略")

(defun make-rect (seg1 seg2)
  (cons seg1 seg2))
(defun row-length (x)
  (car x))
(defun col-segment (x)
  (cdr x))
#+end_src
  
* 2.4
  ダメだ、わかんね。

#+begin_src emacs-lisp
(car (cons x y))
(car (lambda (m) (m x y)))
((lambda (m) (m x y)) (lambda (p q) p))
((lambda (p q) p) x y)
x
#+end_src

* 2.5
  ダメだ、わかんね。

#+begin_src emacs-lisp
;; (a, b) <=> 2^a * 3^b
;; <=>
(* (beki 2 a) (beki 3 b))
;; <=>

(defun beki (n a)
  (defun beki-acc (k a acc)
    (cond ((eq k 0) acc)
          (t (beki-acc (- k 1) a (* acc a)))))
  (beki-acc n a 1))

(defun my-cons (a b) (* (beki 2 a) (beki 3 b)))
#+end_src
  
* 2.6
  ダメだ、わかんね。


#+begin_src emacs-lisp
(defun one
    (+ add-1 zero))
#+end_src

  Skip!!! (=ﾟωﾟ)ﾉ
