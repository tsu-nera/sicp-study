* 3.1

#+begin_src scheme
(define (make-withdraw balance)
  (lambda (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))

(define W1 (make-withdraw 100))
(define W2 (make-withdraw 100))

(W1 50)
(W2 30)
#+end_src

#+begin_src scheme
(define (make-accumulator balance)
  (lambda (amount)
    (begin (set! balance (+ balance amount))
           balance)))

(define A (make-accumulator 5))
(A 10)
#+end_src

* 3.2

#+begin_src scheme
(define (make-monitored function)
  ;; 一時変数宣言
  (let ((times-called 0))
    (lambda (message)
      ;; メッセージパッシングによる振り分け
      (cond ((eq? message 'how-many-calls?) times-called)            
            ((eq? message 'rest-count) (set! times-called 0)) ;; 破壊的代入
            ;; ここでインクリメントする
            (else (set! times-called (+ times-called 1))
                  ;; 最後にリターン
                  (function message))))))

(define s (make-monitored sqrt))
(s 100)
(s 'how-many-calls?)
#+end_src

* 3.3

#+begin_src scheme
(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
    (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch pw m)
    (unless (eq? pw password) (error "Incorrect password"))
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  dispatch)

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-password 'deposit) 50)
#+end_src

* 3.4

#+begin_src scheme
(define (make-account balance password)
  (define times-called 0)
  (define limit 7)  
  (define (withdraw amount)
    (if (>= balance amount)
    (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (call-the-cops) "Call the cops") 

  (define (dispatch pw m)
    (unless (eq? pw password)
      ((set! times-called (+ times-called 1))
       (if (> times-called limit)
           (call-the-cops)
           "Incorrect password")))
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          ((eq? m 'how-many-calls?) times-called)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  dispatch)

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-password 'deposit) 50)
(acc 'secret-password 'how-many-calls?)
#+end_src

* 3.5

#+begin_src scheme
;; given
(define (monte-carlo trials experiment) 
  (define (iter trials-remaining trials-passed) 
    (cond ((= trials-remaining 0) 
           (/ trials-passed trials)) 
          ((experiment) 
           (iter (- trials-remaining 1) (+ trials-passed 1))) 
          (else 
           (iter (- trials-remaining 1) trials-passed)))) 
  (iter trials 0))

;; racket 用のジェネレータ
(define (random-in-range low high) 
  (let ((range (- high low))) 
    (+ low (* (random) range)))) 

(define (estimate-integral P x1 x2 y1 y2 trials)
  ;; 見積り用手続き 見積りにレンジをかける
  (define (experiment) 
    (P (random-in-range x1 x2) 
       (random-in-range y1 y2))) 
  (monte-carlo trials experiment))

;; (x - 5)^2 + (y - 7)^2 < 3^2
(define (P x y) 
  (< (+ (expt (- x 5) 2) 
        (expt (- y 7) 2)) 
     (expt 3 2)))

 (define pi-approx 
   (/ (* (estimate-integral P 2.0 8.0 4.0 10.0 10000) 36) 
      9.0)) 
 pi-approx 
#+end_src

* 3.6

#+begin_src scheme
;; うごかんな..

(define rand ()
  (let ((x random-init))
    (define (generate)
      (set! x (rand-update x))
      x)
    (define (reset)
      (set! x 0)
      x)
    (define (dispatch m)
      (cond
       ((eq? m 'generate) generate)
       ((eq? m 'reset) reset)))
    dispatch))

(define random-init 0) 
(define (rand-update x) (+ x 1)) ; A not-very-evolved PNRG 
(rand 'generate)
#+end_src

* 3.7
  いまいち、なにがやりたいのか分からない.

#+begin_src scheme
(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
    (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch pw m)
    (unless (eq? pw password) (error "Incorrect password"))
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))
  dispatch)

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-password 'deposit) 50)

(define (make-joint another-account another-password password)
  (lambda (pw method)
    (if (eq? pw password)
        (another-account another-password method)
        "Incorrect password")))

(define peter-acc (make-account 100 'open-sesame))
((peter-acc 'open-sesame 'withdraw) 0)

(define paul-acc (make-joint peter-acc 'open-sesame 'rosebud))
((paul-acc 'rosebud 'withdraw) 40)

((peter-acc 'open-sesame 'withdraw) 0)
#+end_src

* 3.15 まで完了
  
* 3.22

#+begin_src scheme
 (define (make-queue) 
   (let ((front-ptr '()) 
         (rear-ptr '())) 
         (define (emtpy-queue?) (null? front-ptr)) 
         (define (set-front-ptr! item) (set! front-ptr item)) 
         (define (set-rear-ptr! item) (set! rear-ptr item)) 
         (define (front-queue)  
           (if (emtpy-queue?) 
             (error "FRONT called with an empty queue") 
             (car front-ptr))) 
         (define (insert-queue! item) 
         (let ((new-pair (cons item '()))) 
             (cond ((emtpy-queue?) 
                     (set-front-ptr! new-pair) 
                     (set-rear-ptr! new-pair)) 
                   (else  
                     (set-cdr! rear-ptr new-pair) 
                     (set-rear-ptr! new-pair))))) 
         (define (delete-queue!) 
           (cond ((emtpy-queue?) 
                   (error "DELETE called with an emtpy queue")) 
                 (else (set-front-ptr! (cdr front-ptr))))) 
      
         (define (print-queue) front-ptr) 
  
         (define (dispatch m) 
           (cond ((eq? m 'empty-queue) emtpy-queue?) 
                 ((eq? m 'front-queue) front-queue) 
                 ((eq? m 'insert-queue!) insert-queue!) 
                 ((eq? m 'delete-queue!) delete-queue!) 
                 ((eq? m 'print-queue) print-queue) 
                 (else (error "undefined operation -- QUEUE" m)))) 
         dispatch))
#+end_src

* links
  - http://sicp.iijlab.net/fulltext/xcont.html
  - [[http://community.schemewiki.org/?sicp-solutions][sicp-solutions]]
  - [[http://www-antenna.ee.titech.ac.jp/~hira/hobby/symbolic/lisp/build-in.html][EmacsLisp 組み込み関数一覧]]
  - http://uents.hatenablog.com/entry/sicp/index
  - [[http://kinokoru.jp/archives/625][SICP 第 3 章 Exercise 難易度リスト ( 3.1 ～ 3.82 ) | きのこる庭]]
