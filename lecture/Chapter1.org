* Chapter 1::        Building Abstractions with Procedures
** 1.1 手続きによる抽象
  - 複数の単純な考えを合成して 1 つにする.
  - 2 つの考えを同時に見えるように 1 つのもので繋ぐ.
    その実在においてそれらに付随しているほかの考えからそれらを分離する

  言語は以下の仕掛けを有している.

  |                      | procedures     | data      |
  |----------------------+----------------+-----------|
  | primitive element    | +, *, <, =     | 23, 1.738 |
  |----------------------+----------------+-----------|
  | means of combination | () combination |           |
  |                      | if             |           |
  |                      | cond           |           |
  |----------------------+----------------+-----------|
  | means of abstraction | defun          |           |
  
*** primitive expressions 基本式: 
     - which represent the simplest entities the language is concerned with,
     - 言語が関わるもっとも単純なものを表す.

#+begin_src emacs-lisp
1
#+end_src

*** means of combination 組み合わせ法: 
     - by which compound elements are built from simpler ones.
     - より単純なものから合成物をつくる

#+begin_src emacs-lisp
(* 1 1)
#+end_src

*** means of abstraction 抽象化法: 
   - by which compound elements can be named and manipulated as units.
   - 合成物に名をつけ, 単一のもとして扱う.

#+begin_src emacs-lisp
(defun square (x) (* x x))
#+end_src

   これは, 以下の糖衣構文となっている. 
   Lisp インタプリタは実際には以下のように解釈している.

#+begin_src emacs-lisp
(defun square
    (lambda (x) (* x x))

(square (square (square 2)))
#+end_src

  lmabda は procedure を生成する. 

  ポイントは,

  *primitive な値と関数との間に区別がないこと*
   
  抽象化によって, primitive な値を自分で定義できる.

*** Newton 法  
#+begin_src emacs-lisp
(defun squr-iter (guess x)
  (if (good-enough? guess x)
      guess
    (squr-iter (improve guess x)
	       x)))

(defun improve (guess x)
  (average guess (/ x guess)))

(defun average (x y)
  (/ (+ x y) 2))

(defun square (guess)
  (expt guess 2))

(defun good-enough? (guess x)
  (< (abs (- (square guess) x)) 0.001))

(defun my-sqrt (x)
  (squr-iter 1.0 x))
  
(my-sqrt 9)
#+end_src

#+RESULTS:
: 3.00009155413138

*** 1.1.8 ブラックボックス
    means of abstraction は, ブラックボックス.
    利用者は, それがどう実装されているかを知る必要はない.
    つまり,

    *手続きの抽象化 procedure abstruction* 

    と言える.

*** 1.1.9 内部定義とブロック構造
    手続きの仮引数は局所的である.
    関数の定義は局所的でない.

    手続きをブラックボックスにするためには,
    利用者に必要のない関数は隠蔽する必要がある.

    定義の入れ子を *ブロック構造* という.
    ブロック構造の中で定義された関数は局所的である.

**** ブロック構造による newton 法の書き直し.
     Emacs Lisp は, ダイナミックスコープを採用している.
     これでは関数定義がブロックの外でも呼び出せてしまう..

    ;;; -*- lexical-binding: t -*- をファイルの先頭に追記する

 #+begin_src emacs-lisp
;;; -*- coding: utf-8; lexical-binding: t -*-
(defun my-sqrt (x)
  (defun squr-iter (guess x)
    (if (good-enough? guess x)
	guess
      (squr-iter (improve guess x)
		 x)))
  (defun improve (guess x)
    (average guess (/ x guess)))
  (defun average (x y)
    (/ (+ x y) 2))
  (defun square (guess)
    (expt guess 2))
  (defun good-enough? (guess x)
    (< (abs (- (square guess) x)) 0.001))
  (squr-iter 1.0 x))
(my-sqrt 9)
#+end_src

** 1.2 手続きとその生成するプロセス 
   Procedures and the Processes They Generate.

   Lecture 1B | MIT 6.001 Structure and Interpretation, 1986:
   -  http://youtu.be/dlbMuv-jix8

*** Peano Arithmetic
    Iterative な定義.

 #+begin_src emacs-lisp
;; normal-order evaluation
;; linear iteration
(defun plus (x y)	      
  (if (= x 0)
      y
    (+ (1- x) (1+ y))))

(plus 4 3)
#+end_src

   Recursive な定義.

#+begin_src emacs-lisp
;; applicative-order evaluation
;; linier recursion
(defun plus (x y)
  (if (= x 0)
      y
    (1+ (+ (1- x) y))))
(plus 4 5)
#+end_src

    exercise 1.9 とかぶる.

*** 1.2.2
    - [[info:sicp.info#1-2-2]]

    再帰による fibonacci.基本的だが, 冗長過ぎる.
  
  #+begin_src emacs-lisp
(defun fib (n)
  (cond ((= n 0) 0)
	((= n 1) 1)
	(t (+ (fib (- n 1))
	      (fib (- n 2))))))

(fib 4)					; => 
(fib 5)					; => 
(fib 6)					; => 
(fib 7)					; => 
  #+end_src

    反復による fibonacci. 状態変数として a, b, count を導入している.
    - [[info:sicp.info#1-2-2]]

  #+begin_src emacs-lisp
(defun fib (n)
  (fib-iter 1 0 n))

(defun fib-iter (a b count)
  (if (= count 0)
      b
    (fib-iter (+ a b) a (- count 1))))

(fib 6)					; => 
(fib 7)					; => 
(fib 8)					; => 
  #+end_src

**** ex
     - If a is exactly 0, we should count that as 1 way to make change.
     - If a is less than 0, we should count that as 0 ways to make change.
     - If n is 0, we should count that as 0 ways to make change.

     We can easily translate this description into a recursive procedure:

 #+begin_src emacs-lisp
(defun count-change (amount)
  (cc amount 2))

(defun cc (amount kinds-of-coins)
  (cond ((= amount 0) 1)
	((or (< amount 0) (= kinds-of-coins 0)) 0)
	(t (+ (cc amount
		  (- kinds-of-coins 1))
	      (cc (- amount
		     (first-denomination kinds-of-coins))
		  kinds-of-coins)))))

(defun first-denomination (kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
	((= kinds-of-coins 2) 5)))

(count-change 10)
 #+end_src

 #+begin_src emacs-lisp
(cc 10 2)
(+ (cc 10 1) (cc (- 10 (first-denomination 2)) 2))
(+ (cc 10 1) (cc (- 10 5) 2))
(+ (cc 10 1) (cc 5 2))
(+ (+ (cc 10 0) (cc 9 1)) (cc 5 2))
(+ (+ 0 (cc 9 1)) (cc 5 2))
(+ 1 (cc 5 2))
(+ 1 (+ (cc 5 1) (cc 1 2)))
(+ 1 (+ 1 (cc 1 2)))
(+ 1 (+ 1 (+ (cc 1 1) (cc -1 1))))
(+ 1 (+ 1 (+ 1 0)))
3
 #+end_src

 #+begin_src emacs-lisp
(defun count-change (amount)
  (cc amount 5))

(defun cc (amount kinds-of-coins)
  (cond ((= amount 0) 1)
	((or (< amount 0) (= kinds-of-coins 0)) 0)
	(t (+ (cc amount
		  (- kinds-of-coins 1))
	      (cc (- amount
		     (first-denomination kinds-of-coins))
		  kinds-of-coins)))))

(defun first-denomination (kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
	((= kinds-of-coins 2) 5)
	((= kinds-of-coins 3) 10)
	((= kinds-of-coins 4) 25)
	((= kinds-of-coins 5) 50)))

(count-change 100)			; => 
#+end_src

 Fermart のテスト

#+begin_src emacs-lisp
(defun expmod (base exp m)
  (cond ((= exp 0) 1)
	((even? exp)
	 (% (square (expmod base (/ exp 2) m))
	    m))
	(t
	 (% (* base (expmod base (- exp 1) m))
	    m))))
#+end_src

*** 1.2.6

#+begin_src emacs-lisp
(defun smallest-divisor (n)
  (find-divisor n 2))

(defun find-divisor (n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
	(t (find-divisor n (+ test-divisor 1)))))

(defun divides? (a b)
  (= (% b a) 0))

(defun square (x) (* x x))

(defun prime? (n)
  (= n (smallest-divisor n)))

(prime? 199)				; => 
(prime? 1999)				; => 
(prime? 19999)				; => 
#+end_src

** 1.3 高階手続きによる抽象
   - https://www.youtube.com/watch?v=erHp3r6PbJk&list=PL8FE88AA54363BC46&index=3

*** 1.3.1

#+begin_src emacs-lisp
(defun inc (n) (+ n 1))
(defun cube (x) (* x x x))

(defun sum-cubes (a b)
  (sum 'cube a 'inc b))

(defun sum (f a next b)
  (if (> a b)
      0
      (+ (funcall f a)
	 (sum f (funcall next a) next b))))

(sum-cubes 1 10)			; => 

(defun integral (f a b dx)
  (defun add-dx (x)
    (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) 'add-dx b)
     dx))

(integral 'cube 0 1 0.01)		; => 

;; 計算できない...
;; (integral 'cube 0 1 0.001)		; => error
#+end_src

** 1.3.3 Finding roots of equations by the half-interval method

#+begin_src emacs-lisp
(defun search (f neg-point pos-point)
  (let ((midpoint (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point)
	midpoint
	(let ((test-value (funcall f midpoint)))
	  (cond ((positive? test-value)
		 (search f neg-point midpoint))
		((negative? test-value)
		 (search f midpoint pos-point))
		(t midpoint))))))

(defun close-enough? (x y)
  (< (abs (- x y)) 0.001))

(defun negative? (x) (> 0 x))
(defun positive? (x) (< 0 x))
(defun average (x y) (/ (+ x y) 2))

(defun half-interval-method (f a b)
  (let ((a-value (funcall f a))
	(b-value (funcall f b)))
    (cond ((and (negative? a-value) (positive? b-value))
	   (search f a b))
	  ((and (negative? b-value) (positive? a-value))
	   (search f b a))
	  (t
	   (error "Values are not of opposite sign" a b))))) 

(half-interval-method 'sin 2.0 4.0)	; => 

(half-interval-method
 (lambda (x)
   (- (* x x x) (* 2 x) 3)) 1.0 2.0)	; => 
#+end_src

** 1.3.4 Procedures as Returned Values
   方程式系を数値計算によって解くための反復法による求根アルゴリズムの 1 つ.
   - [[http://ja.wikipedia.org/wiki/%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%88%E3%83%B3%E6%B3%95][ニュートン法 - Wikipedia]]

   例えば, 2 次方程式を微分した式の近似解を, 反復によって求めることができる.
   
   これがなぜか動かない. とりあえず保留して先に.

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
(defconst sicp-tolerance 0.00001)

(defun fixed-point (f first-guess)
  (letrec
      ((close-enough? (lambda (v1 v2)
                        (< (abs (- v1 v2))
                           sicp-tolerance)))
       (try (lambda (guess)
              (let ((next (funcall f guess)))
                (if (funcall close-enough? next guess)
                    next
                    (funcall try next))))))
    (funcall try first-guess)))

(defun average (x y) (/ (+ x y) 2))
(defun square (x) (* x x))

(defun average-damp (f)
  (lambda (x) (average x (funcall f x))))
  
(funcall (average-damp 'square) 10)     ; => 55

(defun sqrt (x)
  (fixed-point
   (average-damp (lambda (y) (/ x y)))
   1.0))
(sqrt 3)                                ; => 1.7320508075688772

(defun cube-root (x)
  (fixed-point
   (average-damp (lambda (y) (/ x (square y))))
   1.0))
(cube-root 3)                           ; => 1.4422517984541108

(defconst dx 0.000001)

(defun deriv (g)
  (lambda (x)
    (/ (- (funcall g (+ x dx)) (funcall g x))
       dx)))

(defun cube (x) (* x x x))

(funcall (deriv 'cube) 5)               ; => 75.00001501625775

(defun newton-transform (g)
  (lambda (x)
    (- x (/ (funcall g x) (funcall (deriv g) x)))))

(defun newtons-method (g guess)
  (fixed-point (newton-transform g) guess))

(defun sqrt (x)
  (newtons-method (lambda (y) (- (square y) x))
   1.0))
(sqrt 3)                                ; => 1.732050807568878

(defun fixed-point-of-transform (g transform guess)
  (fixed-point (funcall transform g) guess))

(defun sqrt (x)
  (fixed-point-of-transform (lambda (y) (/ x y))
                            'average-damp
                            1.0))
(sqrt 3)                                ; => 1.7320508075688772

(defun sqrt (x)
  (fixed-point-of-transform (lambda (y) (- (square y) x))
                            'newton-transform
                            1.0))
(sqrt 3)                                ; => 1.732050807568878
#+end_src

  われわれはプログラマとして, プログラムの根底にある抽象をみつけ,
  より強力な抽象化ができるように努めてなければならない.

  高階手続きの重要さは, それにより抽象をプログラム言語の要素して
  確かに表せ, 他の計算要素として扱えるようになる点にある.
   

