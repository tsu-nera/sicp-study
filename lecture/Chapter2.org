* chapter 2: Building Abstractions with Data
  Lecture:
  - https://www.youtube.com/watch?v=ymsbTVLbyN4&list=PL8FE88AA54363BC46&index=4

  データ抽象 data-abstraction

  データオブジェクトをどう表現するかに関するプログラムの部分を、
  データオブジェクトをどう使うかに関するプログラムから隔離する方法.
  
  - Representation: 
    constructor, selector

  constructor, selector によって、どう使うかに関するプログラムの
  抽象の壁を構築し、抽象レイヤを構築する.

  これを、Data Abstruction(データ抽象) という.
 
* 2.1 データ抽象入門
** 対
   cons という手続きで構成される基本構造.
  
#+begin_src emacs-lisp
(defun x () (cons 1 2))
  
(car (funcall 'x))
(cdr (funcall 'x))
#+end_src

  対はあらゆるデータ構造を作り出す. 対で構成されたデータを *リスト構造*
  のデータという.
  
** 有理数の表現  

#+begin_src emacs-lisp
(defun make-rat (n d)
  (cons n d))
    
(defun numer (x)
  (car x))
(defun denum (x)
  (cdr x))

(defun print-rat (x)
  (newline)
  (princ (numer x))
  (princ "/")
  (princ (denum x)))

(defun one-half ()
    (make-rat 1 2))

(print-rat (funcall 'one-half))
#+end_src

* 2.2 階層データ構造と閉包性
** list
   対をつかってつくることができる有用な構造は並び (sequence).

   入れ子の cons で作成された並びをリスト(list)という.

#+begin_src emacs-lisp
(setq one-through-four (list 1 2 3 4))
(print one-through-four)

(car one-through-four)
(cdr one-through-four)
(car (cdr one-through-four))
(cons 10 one-through-four)
(cons 5 one-through-four)
#+end_src

  リスト演算

#+begin_src emacs-lisp
(defun list-ref (items n)
  (if (= n 0) (car items)
      (list-ref (cdr items) (- n 1))))

(setq squares (list 1 4 9 16 25))

(list-ref squares 3)
#+end_src
   
#+begin_src emacs-lisp
(defun length (items)
  (if (eq nil items)
      0
      (+ 1 (length (cdr items)))))

(setq odds (list 1 3 5 7))
(length odds)
#+end_src

 反復形

#+begin_src emacs-lisp
(defun length-iter (a count)
  (if (eq nil a)
      count
      (length-iter (cdr a) (+ 1 count))))

(defun length (items)
  (length-iter items 0))
#+end_src


 append

#+begin_src emacs-lisp
(defun append (list1 list2)
  (if (eq nil list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))
(append squares odds)
#+end_src

* map

#+begin_src emacs-lisp
(defun map (proc items)
  (if (null items)
      nil
      (cons (funcall proc (car items))
            (map proc (cdr items)))))

(map 'abs (list -10 2.5 -11.6 17))

(map (lambda (x) (* x x))
     (list 1 2 3 4))
#+end_src

** 2.2.3
*** filter

#+begin_src emacs-lisp
(defun filter (predicate sequence)
  (cond ((null sequence) nil)
        ((funcall predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (t (filter predicate  (cdr sequence)))))

(defun square (x) (* x x))
(defun odd (n) (/= (% n 2) 0))
(mapcar 'square (list 1 2 3 4 5))

(filter 'odd (list 1 2 3 4 5))
#+end_src

*** accumulate

#+begin_src emacs-lisp
(defun accumulate (op initial sequence)
  (if (null sequence)
      initial
      (funcall op (car sequence)
               (accumulate op initial (cdr sequence)))))

(accumulate '+ 0 (list 1 2 3 4 5))
(accumulate '* 1 (list 1 2 3 4 5))
#+end_src

#+begin_src emacs-lisp
(defun enumerate-interval (low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))
(enumerate-interval 2 7)
#+end_src

#+begin_src emacs-lisp
  (defun enumerate-tree (tree)
    (cond ((null tree) nil)
          ((atom tree) (list tree))
          (t (append (enumerate-tree (car tree))
                     (enumerate-tree (cdr tree))))))

  (enumerate-tree (list 1 (list 2 (list 3 4) 5)))
#+end_src


* flatmap
  
#+begin_src emacs-lisp
(accumulate 'append
            nil
            (mapcar (lambda (i)
                   (mapcar (lambda (j) (list i j))
                        (enumerate-interval 1 (- i 1))))
                 (enumerate-interval 1 6)))
#+end_src

#+begin_src emacs-lisp
(defun flatmap (proc seq)
  (accumulate 'append nil (map proc seq)))
#+end_src



* set

#+begin_src emacs-lisp
(defun element-of-set? (x set)
  (cond ((null set) nil)
        ((= x (car set)) t)
        ((< x (car set)) nil)
        ;; > x
        (t (element-of-set? x (cdr set)))))
#+end_src

* tree

#+begin_src emacs-lisp
(defun entry (tree) car tree)
(defun left-branch (tree) (cadr tree))
(defun right-branch (tree) (caddr tree))

(defun make-tree (entry left right)
  (list entry left right))

(defun element-of-set? (x set)
  (cond ((null set) nil)
        ((= x (entry set) t))
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        (t
         (element-of-set? x (right-branch set)))))
#+end_src

